/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type InitialConfigStruct = {
  gmxRouter: PromiseOrValue<string>;
  gmxReader: PromiseOrValue<string>;
  gmxVault: PromiseOrValue<string>;
  wbtc: PromiseOrValue<string>;
  weth: PromiseOrValue<string>;
  uni: PromiseOrValue<string>;
  link: PromiseOrValue<string>;
  usdc: PromiseOrValue<string>;
  usdt: PromiseOrValue<string>;
  dai: PromiseOrValue<string>;
};

export type InitialConfigStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  gmxRouter: string;
  gmxReader: string;
  gmxVault: string;
  wbtc: string;
  weth: string;
  uni: string;
  link: string;
  usdc: string;
  usdt: string;
  dai: string;
};

export interface ArbitrageInterface extends utils.Interface {
  functions: {
    "allWhitelistedTokens(uint256)": FunctionFragment;
    "depositWhitelistedTokens()": FunctionFragment;
    "estimateGmxSushiTradeIsProfit(address,address,address,uint256,uint256)": FunctionFragment;
    "estimateSushiGmxTradeIsProfit(address,address,address,uint256,uint256)": FunctionFragment;
    "ethBalance()": FunctionFragment;
    "getMinPrice(address)": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "getTotalValue()": FunctionFragment;
    "gmxReader()": FunctionFragment;
    "gmxRouter()": FunctionFragment;
    "gmxVault()": FunctionFragment;
    "gov()": FunctionFragment;
    "isGmxTradablePost(address,address,uint256)": FunctionFragment;
    "isGmxTradablePre(address,address,uint256)": FunctionFragment;
    "isProfit()": FunctionFragment;
    "recoverEth()": FunctionFragment;
    "startBalance(address)": FunctionFragment;
    "startTotalValue()": FunctionFragment;
    "tokenDecimals(address)": FunctionFragment;
    "tradeGmxToSushi(address,address,address,uint256,uint256)": FunctionFragment;
    "tradeSushiToGmx(address,address,address,uint256,uint256)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawWhitelistedToken(address)": FunctionFragment;
    "withdrawWhitelistedTokens()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allWhitelistedTokens"
      | "depositWhitelistedTokens"
      | "estimateGmxSushiTradeIsProfit"
      | "estimateSushiGmxTradeIsProfit"
      | "ethBalance"
      | "getMinPrice"
      | "getPrice"
      | "getTotalValue"
      | "gmxReader"
      | "gmxRouter"
      | "gmxVault"
      | "gov"
      | "isGmxTradablePost"
      | "isGmxTradablePre"
      | "isProfit"
      | "recoverEth"
      | "startBalance"
      | "startTotalValue"
      | "tokenDecimals"
      | "tradeGmxToSushi"
      | "tradeSushiToGmx"
      | "weth"
      | "withdrawWhitelistedToken"
      | "withdrawWhitelistedTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allWhitelistedTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWhitelistedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateGmxSushiTradeIsProfit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateSushiGmxTradeIsProfit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ethBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gmxReader", values?: undefined): string;
  encodeFunctionData(functionFragment: "gmxRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "gmxVault", values?: undefined): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isGmxTradablePost",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isGmxTradablePre",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "isProfit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverEth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startTotalValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeGmxToSushi",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tradeSushiToGmx",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawWhitelistedToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWhitelistedTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "allWhitelistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositWhitelistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateGmxSushiTradeIsProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateSushiGmxTradeIsProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gmxReader", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gmxRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gmxVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGmxTradablePost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGmxTradablePre",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isProfit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recoverEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTotalValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeGmxToSushi",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeSushiToGmx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWhitelistedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWhitelistedTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Arbitrage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArbitrageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allWhitelistedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    depositWhitelistedTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateGmxSushiTradeIsProfit(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    estimateSushiGmxTradeIsProfit(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    ethBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    gmxReader(overrides?: CallOverrides): Promise<[string]>;

    gmxRouter(overrides?: CallOverrides): Promise<[string]>;

    gmxVault(overrides?: CallOverrides): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    isGmxTradablePost(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGmxTradablePre(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isProfit(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    recoverEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    startTotalValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenDecimals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tradeGmxToSushi(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tradeSushiToGmx(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    withdrawWhitelistedToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawWhitelistedTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allWhitelistedTokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  depositWhitelistedTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateGmxSushiTradeIsProfit(
    _sushiRouter: PromiseOrValue<string>,
    _tokenIn: PromiseOrValue<string>,
    _tokenMiddle: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    _gas: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  estimateSushiGmxTradeIsProfit(
    _sushiRouter: PromiseOrValue<string>,
    _tokenIn: PromiseOrValue<string>,
    _tokenMiddle: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    _gas: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  ethBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getMinPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

  gmxReader(overrides?: CallOverrides): Promise<string>;

  gmxRouter(overrides?: CallOverrides): Promise<string>;

  gmxVault(overrides?: CallOverrides): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  isGmxTradablePost(
    _tokenIn: PromiseOrValue<string>,
    _tokenOut: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGmxTradablePre(
    _tokenIn: PromiseOrValue<string>,
    _tokenOut: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isProfit(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

  recoverEth(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startBalance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  startTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

  tokenDecimals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tradeGmxToSushi(
    _sushiRouter: PromiseOrValue<string>,
    _tokenIn: PromiseOrValue<string>,
    _tokenMiddle: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    _gas: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tradeSushiToGmx(
    _sushiRouter: PromiseOrValue<string>,
    _tokenIn: PromiseOrValue<string>,
    _tokenMiddle: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    _gas: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  withdrawWhitelistedToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawWhitelistedTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allWhitelistedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    depositWhitelistedTokens(overrides?: CallOverrides): Promise<void>;

    estimateGmxSushiTradeIsProfit(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    estimateSushiGmxTradeIsProfit(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    ethBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getMinPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

    gmxReader(overrides?: CallOverrides): Promise<string>;

    gmxRouter(overrides?: CallOverrides): Promise<string>;

    gmxVault(overrides?: CallOverrides): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    isGmxTradablePost(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGmxTradablePre(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isProfit(overrides?: CallOverrides): Promise<[boolean, BigNumber]>;

    recoverEth(overrides?: CallOverrides): Promise<void>;

    startBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeGmxToSushi(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tradeSushiToGmx(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    weth(overrides?: CallOverrides): Promise<string>;

    withdrawWhitelistedToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawWhitelistedTokens(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allWhitelistedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositWhitelistedTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateGmxSushiTradeIsProfit(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimateSushiGmxTradeIsProfit(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ethBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getMinPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

    gmxReader(overrides?: CallOverrides): Promise<BigNumber>;

    gmxRouter(overrides?: CallOverrides): Promise<BigNumber>;

    gmxVault(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    isGmxTradablePost(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGmxTradablePre(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProfit(overrides?: CallOverrides): Promise<BigNumber>;

    recoverEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startTotalValue(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tradeGmxToSushi(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tradeSushiToGmx(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawWhitelistedToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawWhitelistedTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allWhitelistedTokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositWhitelistedTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateGmxSushiTradeIsProfit(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimateSushiGmxTradeIsProfit(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxReader(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gmxVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGmxTradablePost(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGmxTradablePre(
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProfit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startTotalValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDecimals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeGmxToSushi(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tradeSushiToGmx(
      _sushiRouter: PromiseOrValue<string>,
      _tokenIn: PromiseOrValue<string>,
      _tokenMiddle: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _gas: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawWhitelistedToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawWhitelistedTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
