/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface IGmxVaultInterface extends utils.Interface {
  functions: {
    "adjustForDecimals(uint256,address,address)": FunctionFragment;
    "bufferAmounts(address)": FunctionFragment;
    "cumulativeFundingRates(address)": FunctionFragment;
    "fundingInterval()": FunctionFragment;
    "getDelta(address,uint256,uint256,bool,uint256)": FunctionFragment;
    "getFeeBasisPoints(address,uint256,uint256,uint256,bool)": FunctionFragment;
    "getFundingFee(address,uint256,uint256)": FunctionFragment;
    "getMaxPrice(address)": FunctionFragment;
    "getMinPrice(address)": FunctionFragment;
    "getPosition(address,address,address,bool)": FunctionFragment;
    "getPositionFee(uint256)": FunctionFragment;
    "getRedemptionAmount(address,uint256)": FunctionFragment;
    "globalShortAveragePrices(address)": FunctionFragment;
    "globalShortSizes(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "guaranteedUsd(address)": FunctionFragment;
    "lastFundingTimes(address)": FunctionFragment;
    "maxUsdgAmounts(address)": FunctionFragment;
    "mintBurnFeeBasisPoints()": FunctionFragment;
    "poolAmounts(address)": FunctionFragment;
    "reservedAmounts(address)": FunctionFragment;
    "stableTokens(address)": FunctionFragment;
    "taxBasisPoints()": FunctionFragment;
    "tokenDecimals(address)": FunctionFragment;
    "tokenToUsdMin(address,uint256)": FunctionFragment;
    "updateCumulativeFundingRate(address)": FunctionFragment;
    "usdToTokenMax(address,uint256)": FunctionFragment;
    "usdToTokenMin(address,uint256)": FunctionFragment;
    "usdgAmounts(address)": FunctionFragment;
    "whitelistedTokens(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "adjustForDecimals"
      | "bufferAmounts"
      | "cumulativeFundingRates"
      | "fundingInterval"
      | "getDelta"
      | "getFeeBasisPoints"
      | "getFundingFee"
      | "getMaxPrice"
      | "getMinPrice"
      | "getPosition"
      | "getPositionFee"
      | "getRedemptionAmount"
      | "globalShortAveragePrices"
      | "globalShortSizes"
      | "gov"
      | "guaranteedUsd"
      | "lastFundingTimes"
      | "maxUsdgAmounts"
      | "mintBurnFeeBasisPoints"
      | "poolAmounts"
      | "reservedAmounts"
      | "stableTokens"
      | "taxBasisPoints"
      | "tokenDecimals"
      | "tokenToUsdMin"
      | "updateCumulativeFundingRate"
      | "usdToTokenMax"
      | "usdToTokenMin"
      | "usdgAmounts"
      | "whitelistedTokens"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "adjustForDecimals",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bufferAmounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeFundingRates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundingInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelta",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeBasisPoints",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingFee",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRedemptionAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalShortAveragePrices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalShortSizes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "guaranteedUsd",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastFundingTimes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxUsdgAmounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintBurnFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolAmounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "reservedAmounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stableTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "taxBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToUsdMin",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCumulativeFundingRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usdToTokenMax",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "usdToTokenMin",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "usdgAmounts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokens",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustForDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bufferAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeFundingRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRedemptionAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalShortAveragePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalShortSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "guaranteedUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastFundingTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxUsdgAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintBurnFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservedAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenToUsdMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCumulativeFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdToTokenMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdToTokenMin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdgAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGmxVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGmxVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bufferAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cumulativeFundingRates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    fundingInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFundingFee(
      _token: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _entryFundingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ]
    >;

    getPositionFee(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    globalShortAveragePrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    globalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    guaranteedUsd(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastFundingTimes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    maxUsdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    reservedAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stableTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    taxBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenDecimals(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenToUsdMin(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateCumulativeFundingRate(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdToTokenMax(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    usdToTokenMin(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    usdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  adjustForDecimals(
    _amount: PromiseOrValue<BigNumberish>,
    _tokenDiv: PromiseOrValue<string>,
    _tokenMul: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bufferAmounts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cumulativeFundingRates(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

  getDelta(
    _indexToken: PromiseOrValue<string>,
    _size: PromiseOrValue<BigNumberish>,
    _averagePrice: PromiseOrValue<BigNumberish>,
    _isLong: PromiseOrValue<boolean>,
    _lastIncreasedTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  getFeeBasisPoints(
    _token: PromiseOrValue<string>,
    _usdgDelta: PromiseOrValue<BigNumberish>,
    _feeBasisPoints: PromiseOrValue<BigNumberish>,
    _taxBasisPoints: PromiseOrValue<BigNumberish>,
    _increment: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFundingFee(
    _token: PromiseOrValue<string>,
    _size: PromiseOrValue<BigNumberish>,
    _entryFundingRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMaxPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPosition(
    _account: PromiseOrValue<string>,
    _collateralToken: PromiseOrValue<string>,
    _indexToken: PromiseOrValue<string>,
    _isLong: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      BigNumber
    ]
  >;

  getPositionFee(
    _sizeDelta: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRedemptionAmount(
    _token: PromiseOrValue<string>,
    _usdgAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalShortAveragePrices(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  globalShortSizes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  guaranteedUsd(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastFundingTimes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxUsdgAmounts(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  poolAmounts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  reservedAmounts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stableTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  tokenDecimals(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenToUsdMin(
    _token: PromiseOrValue<string>,
    _tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateCumulativeFundingRate(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdToTokenMax(
    _token: PromiseOrValue<string>,
    _usdAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  usdToTokenMin(
    _token: PromiseOrValue<string>,
    _usdAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  usdgAmounts(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistedTokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bufferAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeFundingRates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingFee(
      _token: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _entryFundingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        BigNumber
      ]
    >;

    getPositionFee(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortAveragePrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    guaranteedUsd(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastFundingTimes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxUsdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    poolAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reservedAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToUsdMin(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCumulativeFundingRate(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdToTokenMax(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdToTokenMin(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bufferAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeFundingRates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingFee(
      _token: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _entryFundingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionFee(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortAveragePrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    guaranteedUsd(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastFundingTimes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxUsdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintBurnFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    poolAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reservedAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenToUsdMin(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCumulativeFundingRate(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdToTokenMax(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdToTokenMin(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adjustForDecimals(
      _amount: PromiseOrValue<BigNumberish>,
      _tokenDiv: PromiseOrValue<string>,
      _tokenMul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bufferAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeFundingRates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelta(
      _indexToken: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _averagePrice: PromiseOrValue<BigNumberish>,
      _isLong: PromiseOrValue<boolean>,
      _lastIncreasedTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeBasisPoints(
      _token: PromiseOrValue<string>,
      _usdgDelta: PromiseOrValue<BigNumberish>,
      _feeBasisPoints: PromiseOrValue<BigNumberish>,
      _taxBasisPoints: PromiseOrValue<BigNumberish>,
      _increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingFee(
      _token: PromiseOrValue<string>,
      _size: PromiseOrValue<BigNumberish>,
      _entryFundingRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      _account: PromiseOrValue<string>,
      _collateralToken: PromiseOrValue<string>,
      _indexToken: PromiseOrValue<string>,
      _isLong: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionFee(
      _sizeDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRedemptionAmount(
      _token: PromiseOrValue<string>,
      _usdgAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalShortAveragePrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalShortSizes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guaranteedUsd(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastFundingTimes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxUsdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintBurnFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reservedAmounts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxBasisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDecimals(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenToUsdMin(
      _token: PromiseOrValue<string>,
      _tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCumulativeFundingRate(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdToTokenMax(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdToTokenMin(
      _token: PromiseOrValue<string>,
      _usdAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usdgAmounts(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistedTokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
